version: 2.1
jobs:
  build:
    docker:
      - image: cimg/php:8.1.11-node
    steps:
      - run:
          name: Add github.com to known hosts
          command: |
            mkdir ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Clone Repo
          command: |
            echo "clone"
            git clone $CIRCLE_REPOSITORY_URL .
            git checkout -b "${CIRCLE_BRANCH}-deploy"
            git remote set-url origin "https://ampersarnie:${GITHUB_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git"
      - run: composer install --no-dev
      - run: npm ci
      - run: ./node_modules/.bin/build-tools build --once --production
      - run:
          when: on_success
          name: Clean Files
          command: |
            rm .gitignore
            mv .deployignore .gitignore
            git rm -r --cached .
            git add .
            git clean -fdx
      - run:
          when: on_success
          name: Commit build
          command: |
            git config credential.helper 'cache --timeout=120'
            git config user.email "<email>"
            git config user.name "CIDeployment"
            git commit --allow-empty -m "ci: deploy ${CIRCLE_SHA1}"
            git push -u --force origin "${CIRCLE_BRANCH}-deploy:${CIRCLE_BRANCH}-built"
  release:
    docker:
      - image: cimg/php:8.1.11-node
    steps:
      - run:
          name: Add github.com to known hosts
          command: |
            mkdir ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Clone Repo
          command: |
            echo "clone"
            git clone $CIRCLE_REPOSITORY_URL .
            git remote set-url origin "https://ampersarnie:${GITHUB_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git"
      - run:
          name: Check Version
          command: |
            PACKAGE_VERSION=$(cat package.json \
              | grep version \
              | head -1 \
              | awk -F: '{ print $2 }' \
              | sed 's/[",]//g')
            echo "$PACKAGE_VERSION -> $(git tag -l $PACKAGE_VERSION)"
            if [ $(git tag -l "$PACKAGE_VERSION") ]; then
              echo "Halting the steps."
              circleci step halt
              circleci-agent step halt
              exit 0
            fi
      - run:
          name: Create New Tag
          command: |
            PACKAGE_VERSION=$(cat package.json \
              | grep version \
              | head -1 \
              | awk -F: '{ print $2 }' \
              | sed 's/[",]//g')
            git checkout $CIRCLE_BRANCH
            git tag $PACKAGE_VERSION
      - run:
          name: Push Tags
          command: |
              git push origin --tags --force
workflows:
  version: 2
  build_flow:
    jobs:
      - build:
          filters:
            branches:
              only:
                - main
      - release:
          filters:
            branches:
              only:
                - main-built
